# Select the rows to be the target wavelegths and the columns to be the target samples
ref_dry <- ref_dry[350:2500, 2:ncol(ref_dry)]
# Calculate the average reflectance of the columns and exclude NA values
avg_values <- colMeans(ref_dry, na.rm=T)
# Create a new data with "Sample_ID" and "Reflectance" columns containing the soil sample ID and average reflectance respectively
ref_dry_avg <- data.frame(
"Sample_ID" = colnames(ref_dry),
"Reflectance" = avg_values
)
# Read the "SoilMetrics_v01" file as a data frame
data_met <- read.csv("data-raw/SoilMetrics_v01.csv")
# Get a summary of the data frame:
summary(data_met)
# Install and load the package needed to preprocess the data
install.packages("dplyr")
library(dplyr)
# Merge the organic carbon data from "data_met" to "ref_dry_avg" dataset based on sample ID
ref_dry_avg <- ref_dry_avg %>%
left_join(data_met %>% select(Sample_ID, OC), by = "Sample_ID") %>%
rename(Organic_Carbon = OC)
# Get a summary of the new data frame
summary(ref_dry_avg)
# Save to data folder
usethis::use_data(ref_dry_avg, overwrite = TRUE)
install.packages("prospectr")
install.packages("prospectr")
# Install and load the package needed to preprocess the data
install.packages("prospectr")
library(prospectr)
# Read the "SoilReflectanceDry_v01" file as a data frame
data <- read.csv("data-raw/SoilReflectanceDry_v01.csv")
# Get a summary of the data frame
summary(data)
# Calculate continuum removal for the data frame
ref_dry <- as.data.frame(apply(data[,-1], MARGIN=2, FUN =continuumRemoval, wav = data$Wavelength))
ref_dry <- cbind(Wavelength = data$Wavelength, ref_dry)
# Select the rows to be the target wavelegths and the columns to be the target samples
ref_dry <- ref_dry[350:2500, 2:ncol(ref_dry)]
# Calculate the average reflectance of the columns and exclude NA values
avg_values <- colMeans(ref_dry, na.rm=T)
# Create a new data with "Sample_ID" and "Reflectance" columns containing the soil sample ID and average reflectance respectively
ref_dry_avg <- data.frame(
"Sample_ID" = colnames(ref_dry),
"Reflectance" = avg_values
)
# Read the "SoilMetrics_v01" file as a data frame
data_met <- read.csv("data-raw/SoilMetrics_v01.csv")
# Get a summary of the data frame:
summary(data_met)
# Install and load the package needed to preprocess the data
install.packages("dplyr")
library(dplyr)
# Merge the organic carbon data from "data_met" to "ref_dry_avg" dataset based on sample ID
ref_dry_avg <- ref_dry_avg %>%
left_join(data_met %>% select(Sample_ID, OC), by = "Sample_ID") %>%
rename(Organic_Carbon = OC)
# Get a summary of the new data frame
summary(ref_dry_avg)
# Save to data folder
usethis::use_data(ref_dry_avg, overwrite = TRUE)
install.packages("dplyr")
install.packages("prospectr")
data(ref_dry_avg)
Reflectancce <- ref_dry_avg$Reflectance
devtools::check()
rlang::last_trace()
devtools::check()
devtools::check()
pred_test <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", "lm", nfolds = 5, "Predicted_Carbon")
pred_test <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", "lm", folds = 5, "Predicted_Carbon")
pred_test <- cpred(ref_dry_avg, Reflectance, Organic_Carbon, lm, nfolds = 5, Predicted_Carbon)
pred_test <- cpred(ref_dry_avg, Reflectance, Organic_Carbon, lm, folds = 5, Predicted_Carbon)
pred_test <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", "lm", folds = 5, "Predicted_Carbon")
pred_test <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", "lm", folds = 5, "Predicted_Carbon")
pred_test <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", "lm", folds = 5, "Predicted_Carbon")
pred_test <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", "lm", folds = 5, "Predicted_Carbon")
pred_test <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", "lm", folds = 5, "Predicted_Carbon")
pred_test <- cpred(ref_dry_avg, Reflectance, Organic_Carbon, lm, folds = 5, Predicted_Carbon)
pred_test <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", "lm", folds = 5, "Predicted_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", nfolds = 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", folds = 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", folds = 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", folds = 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", folds = 10, "Predicted_Organic_Carbon")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_readme_rmd()
devtools::check()
install.packages("caret")
# Install and load the package needed to preprocess the data
install.packages("prospectr")
library(prospectr)
# Read the "SoilReflectanceDry_v01" file as a data frame
data <- read.csv("data-raw/SoilReflectanceDry_v01.csv")
# Get a summary of the data frame
summary(data)
# Calculate continuum removal for the data frame
ref_dry <- as.data.frame(apply(data[,-1], MARGIN=2, FUN =continuumRemoval, wav = data$Wavelength))
ref_dry <- cbind(Wavelength = data$Wavelength, ref_dry)
# Select the rows to be the target wavelegths and the columns to be the target samples
ref_dry <- ref_dry[350:2500, 2:ncol(ref_dry)]
# Calculate the average reflectance of the columns and exclude NA values
avg_values <- colMeans(ref_dry, na.rm=T)
# Create a new data with "Sample_ID" and "Reflectance" columns containing the soil sample ID and average reflectance respectively
ref_dry_avg <- data.frame(
"Sample_ID" = colnames(ref_dry),
"Reflectance" = avg_values
)
# Read the "SoilMetrics_v01" file as a data frame
data_met <- read.csv("data-raw/SoilMetrics_v01.csv")
# Get a summary of the data frame:
summary(data_met)
# Install and load the package needed to preprocess the data
install.packages("dplyr")
library(dplyr)
# Merge the organic carbon data from "data_met" to "ref_dry_avg" dataset based on sample ID
ref_dry_avg <- ref_dry_avg %>%
left_join(data_met %>% select(Sample_ID, OC), by = "Sample_ID") %>%
rename(Organic_Carbon = OC)
# Get a summary of the new data frame
summary(ref_dry_avg)
# Save to data folder
usethis::use_data(ref_dry_avg, overwrite = TRUE)
install.packages("dplyr")
# Install and load the package needed to preprocess the data
install.packages("prospectr")
library(prospectr)
# Read the "SoilReflectanceDry_v01" file as a data frame
data <- read.csv("data-raw/SoilReflectanceDry_v01.csv")
# Get a summary of the data frame
summary(data)
# Calculate continuum removal for the data frame
ref_dry <- as.data.frame(apply(data[,-1], MARGIN=2, FUN =continuumRemoval, wav = data$Wavelength))
ref_dry <- cbind(Wavelength = data$Wavelength, ref_dry)
# Select the rows to be the target wavelegths and the columns to be the target samples
ref_dry <- ref_dry[350:2500, 2:ncol(ref_dry)]
# Calculate the average reflectance of the columns and exclude NA values
avg_values <- colMeans(ref_dry, na.rm=T)
# Create a new data with "Sample_ID" and "Reflectance" columns containing the soil sample ID and average reflectance respectively
ref_dry_avg <- data.frame(
"Sample_ID" = colnames(ref_dry),
"Reflectance" = avg_values
)
# Read the "SoilMetrics_v01" file as a data frame
data_met <- read.csv("data-raw/SoilMetrics_v01.csv")
# Get a summary of the data frame:
summary(data_met)
# Install and load the package needed to preprocess the data
install.packages("dplyr")
library(dplyr)
# Merge the organic carbon data from "data_met" to "ref_dry_avg" dataset based on sample ID
ref_dry_avg <- ref_dry_avg %>%
left_join(data_met %>% select(Sample_ID, OC), by = "Sample_ID") %>%
rename(Organic_Carbon = OC)
# Get a summary of the new data frame
summary(ref_dry_avg)
# Save to data folder
usethis::use_data(ref_dry_avg, overwrite = TRUE)
install.packages("prospectr")
install.packages("prospectr")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", folds = 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", folds = 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, $Reflectance, $Organic_Carbon, folds = 10, $Predicted_Organic_Carbon)
pred_c <- cpred(ref_dry_avg, ref_dry_avg$Reflectance, ref_dry_avg$Organic_Carbon, folds = 10, $ref_dry_avgPredicted_Organic_Carbon)
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", folds = 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", folds = 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, Reflectance, Organic_Carbon, folds = 10, Predicted_Organic_Carbon)
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", folds = 10, "Predicted_Organic_Carbon")
results <- cpred(data, Response, Organic_Carbon, test_size = 0.2, num_folds = 5, Predictions)
resulting_data <- cpred(ref_dry_avg, "Reflectancer", "Organic_Carbon", 0.2, 5, "Predicted")
resulting_data <- perform_linear_regression(your_dataset, "predictor_var", "response_var", 0.2, 5)
resulting_data <- cpred(ref_dry_avg, "Reflectancer", "Organic_Carbon", 0.2, 5)
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", folds = 10, "Predicted_Organic_Carbon")
View(ref_dry_avg)
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.2, 10, "Predicted_Organic_Carbon")
data = ref_dry_avg
test_size= 0.2
predict_col= 'Reflectance'
response_col='Organica_Carbon'
prediction_col = 'Predicted_Organica_Carbon'
indices <- sample(1:nrow(data), nrow(data) * (1 - test_size))
train_data <- data[indices, ]
test_data <- data[-indices, ]
lm_model <- lm(data[, response_col] ~ data[, predictor_col], data = train_data)
response_col='Organic_Carbon'
lm_model <- lm(data[, response_col] ~ data[, predictor_col], data = train_data)
predictor_col= 'Reflectance'
lm_model <- lm(data[, response_col] ~ data[, predictor_col], data = train_data)
train_control <- trainControl(method = "cv", number = cv_folds)
cv_folds = 10
train_control <- trainControl(method = "cv", number = cv_folds)
cv_model <- train(train_data[, predictor_col], train_data[, response_col], method = "lm", trControl = train_control)
?caret::train
class(train_data[, predictor_col])
train_data[, predictor_col]
train_data[, response_col]
class(train_data$Reflectance)
library(dplyr)
train_data[,1]
cv_model <- train(x= predictor_col,y =  response_col,data=train_data, method = "lm", trControl = train_control)
cv_model <- train(train_data%>% select( predictor_col), y= train_data %>% select (response_col), method = "lm", trControl = train_control)
library(dplyr)
cv_model <- train(train_data%>% select( predictor_col), y= train_data %>% select (response_col), method = "lm", trControl = train_control)
cv_model <- train(x= data.frame(train_data[, predictor_col]), train_data[, response_col], method = "lm", trControl = train_control)
class(train_data$Reflectance)
class(train_data['Reflectance'])
class(train_data['Reflectance'])
class(train_data[,'Reflectance'])
cv_model <- train(x= train_data[predictor_col], train_data[, response_col], method = "lm", trControl = train_control)
cv_model <- train(x= train_data[predictor_col], train_data[ response_col], method = "lm", trControl = train_control)
cv_model <- train(x= data.frame(train_data[, predictor_col]), train_data[, response_col], method = "lm", trControl = train_control)
cv_model0 <- train(x= train_data[predictor_col], train_data[, response_col], method = "lm", trControl = train_control)
identical(cv_model,cv_model0)
cv_model
cv_model0
set.seed(123)
cv_model <- train(x= data.frame(train_data[, predictor_col]), train_data[, response_col], method = "lm", trControl = train_control)
set.seed(123)
cv_model0 <- train(x= train_data[predictor_col], train_data[, response_col], method = "lm", trControl = train_control)
identical(cv_model,cv_model0)
cv_model
cv_model0
test_data[, prediction_col] <- predict(lm_model, newdata = test_data)
cv_model <- train(x= train_data[predictor_col], train_data[, response_col], method = "lm", trControl = train_control)
test_data[, prediction_col] <- predict(lm_model, newdata = test_data)
test_data
lm_model
summary(lm_model)
test_data[, prediction_col] <- predict(cv_model, newdata = test_data)
lm_model <- lm(formula(paste0(response_col, '~', predict_col)), data = train_data)
test_data[, prediction_col] <- predict(lm_model, newdata = test_data)
paste0(response_col, '~', predict_col)
formula(paste0(response_col, '~', predict_col))
class(formula(paste0(response_col, '~', predict_col)))
test_data[, prediction_col] <- predict(lm_model, newdata = test_data)
t2 <- predict(lm_model, newdata = test_data)
t1 <- predict(cv_model, newdata = test_data)
identical(t1,t2)
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organica_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10)
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
data(ref_dry_avg)
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c <- cpred(data, predictor_col, response_col, test_size, cv_folds, prediction_col)
install.packages(cpred)
install.packages("cpred")
library(cpred)
install.packages("devtools")
devtools::install_github("KangyuSo/my-GEO712-repository")
install.packages("devtools")
install.packages("cpred")
library(cpred)
(data, predictor_col, response_col, test_size, cv_folds, prediction_col)
indices <- sample(1:nrow(data), nrow(data) * (1 - test_size))
train_data <- data[indices, ]
test_data <- data[-indices, ]
lm_model <- lm(formula(paste0(response_col, '~', predictor_col)), data = train_data)
train_control <- trainControl(method = "cv", number = cv_folds)
cv_model <- train(x= data.frame(train_data[, predictor_col]), train_data[, response_col], method = "lm", trControl = train_control)
cv_model <- train(x= train_data[predictor_col], train_data[, response_col], method = "lm", trControl = train_control)
test_data[, prediction_col] <- predict(cv_model, newdata = test_data)
return(test_data)
cpred <- function(data, predictor_col, response_col, test_size, cv_folds, prediction_col) {
library(caret)
set.seed(123)
indices <- sample(1:nrow(data), nrow(data) * (1 - test_size))
train_data <- data[indices, ]
test_data <- data[-indices, ]
lm_model <- lm(formula(paste0(response_col, '~', predictor_col)), data = train_data)
train_control <- trainControl(method = "cv", number = cv_folds)
cv_model <- train(x= data.frame(train_data[, predictor_col]), train_data[, response_col], method = "lm", trControl = train_control)
cv_model <- train(x= train_data[predictor_col], train_data[, response_col], method = "lm", trControl = train_control)
test_data[, prediction_col] <- predict(cv_model, newdata = test_data)
}
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
data(pred_c)
return(data)
data <- rbind(train_data, test_data)
return(data)
}
e
test_data[, prediction_col] <- predict(cv_model, newdata = test_data)
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c_new <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c_newly <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c_datanew <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c_datanew <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_cod <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
Y <- ref_dry_avg[ref_dry_avg$Sample_ID %in% pred_c, ]
Print Y
Y <- ref_dry_avg[ref_dry_avg$Sample_ID %in% pred_c, ]
Print(Y)
Y <- ref_dry_avg[ref_dry_avg$Sample_ID %in% c(pred_c), ]
LetsSee <- ref_dry_avg[ref_dry_avg$Sample_ID %in% c(pred_c), ]
load(pred_c)
Y <- data.frame(TestData = test_data, Predictor = ref_dry_avg$SampleID)
Y <- data.frame(TestData = test_data, Predictor = ref_dry_avg$Reflectance)
filtered_X <- X[ref_dry_avg$Reflectance %in% test_data, ]
filtered_X <- X[ref_dry_avg$Reflectance %in% test_data, ]
filtered_X <- ref_dry_avg[ref_dry_avg$Reflectance %in% test_data, ]
Y <- data.frame(TestData = test_data, Predictor = filtered_X$Reflectance)
View(pred_c)
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pleasework <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
view(new_data)
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
cpred <- function(data, predictor_col, response_col, test_size, cv_folds, prediction_col, cpred_frame)
cpred
cpred <- function(data, predictor_col, response_col, test_size, cv_folds, prediction_col) {
library(caret)
set.seed(123)
indices <- sample(1:nrow(data), nrow(data) * (1 - test_size))
train_data <- data[indices, ]
test_data <- data[-indices, ]
lm_model <- lm(formula(paste0(response_col, '~', predictor_col)), data = train_data)
train_control <- trainControl(method = "cv", number = cv_folds)
cv_model <- train(x= data.frame(train_data[, predictor_col]), train_data[, response_col], method = "lm", trControl = train_control)
cv_model <- train(x= train_data[predictor_col], train_data[, response_col], method = "lm", trControl = train_control)
test_data[, prediction_col] <- predict(cv_model, newdata = test_data)
new_data <- data.frame(test_data[, response_col], test_data[, predictor_col])
return(new_data)
}
cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
names(test_data)
head(test_data)
head(ref_dry_avg)
cpred <- function(data, predictor_col, response_col, test_size, cv_folds, prediction_col) {
library(caret)
set.seed(123)
indices <- sample(1:nrow(data), nrow(data) * (1 - test_size))
train_data <- data[indices, ]
test_data <- data[-indices, ]
lm_model <- lm(formula(paste0(response_col, '~', predictor_col)), data = train_data)
train_control <- trainControl(method = "cv", number = cv_folds)
cv_model <- train(x= data.frame(train_data[, predictor_col]), train_data[, response_col], method = "lm", trControl = train_control)
cv_model <- train(x= train_data[predictor_col], train_data[, response_col], method = "lm", trControl = train_control)
test_data[, prediction_col] <- predict(cv_model, newdata = test_data)
#new_data <- data.frame(test_data[, predictor_col], test_data[, prediction_col])
return(test_data)
}
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
pred_c
head(pred_c)
# Install and load the package needed to preprocess the data
install.packages("prospectr")
library(prospectr)
# Read the "SoilReflectanceDry_v01" file as a data frame
data <- read.csv("data-raw/SoilReflectanceDry_v01.csv")
# Get a summary of the data frame
summary(data)
# Calculate continuum removal for the data frame
ref_dry <- as.data.frame(apply(data[,-1], MARGIN=2, FUN =continuumRemoval, wav = data$Wavelength))
ref_dry <- cbind(Wavelength = data$Wavelength, ref_dry)
# Select the rows to be the target wavelegths and the columns to be the target samples
ref_dry <- ref_dry[350:2500, 2:ncol(ref_dry)]
# Calculate the average reflectance of the columns and exclude NA values
avg_values <- colMeans(ref_dry, na.rm=T)
# Create a new data with "Sample_ID" and "Reflectance" columns containing the soil sample ID and average reflectance respectively
ref_dry_avg <- data.frame(
"Sample_ID" = colnames(ref_dry),
"Reflectance" = avg_values
)
# Read the "SoilMetrics_v01" file as a data frame
data_met <- read.csv("data-raw/SoilMetrics_v01.csv")
# Get a summary of the data frame:
summary(data_met)
# Install and load the package needed to preprocess the data
install.packages("dplyr")
library(dplyr)
# Merge the organic carbon data from "data_met" to "ref_dry_avg" dataset based on sample ID
ref_dry_avg <- ref_dry_avg %>%
left_join(data_met %>% select(Sample_ID, OC), by = "Sample_ID") %>%
rename(Organic_Carbon = OC)
# Get a summary of the new data frame
summary(ref_dry_avg)
# Save to data folder
usethis::use_data(ref_dry_avg, overwrite = TRUE)
install.packages("prospectr")
install.packages("prospectr")
# Install and load the package needed to preprocess the data
install.packages("prospectr")
library(prospectr)
# Read the "SoilReflectanceDry_v01" file as a data frame
data <- read.csv("data-raw/SoilReflectanceDry_v01.csv")
# Get a summary of the data frame
summary(data)
# Calculate continuum removal for the data frame
ref_dry <- as.data.frame(apply(data[,-1], MARGIN=2, FUN =continuumRemoval, wav = data$Wavelength))
ref_dry <- cbind(Wavelength = data$Wavelength, ref_dry)
# Select the rows to be the target wavelegths and the columns to be the target samples
ref_dry <- ref_dry[350:2500, 2:ncol(ref_dry)]
# Install and load the package needed to preprocess the data
install.packages("prospectr")
library(prospectr)
# Read the "SoilReflectanceDry_v01" file as a data frame
data <- read.csv("data-raw/SoilReflectanceDry_v01.csv")
# Get a summary of the data frame
summary(data)
# Calculate continuum removal for the data frame
ref_dry <- as.data.frame(apply(data[,-1], MARGIN=2, FUN =continuumRemoval, wav = data$Wavelength))
ref_dry <- cbind(Wavelength = data$Wavelength, ref_dry)
# Select the rows to be the target wavelegths and the columns to be the target samples
ref_dry <- ref_dry[350:2500, 2:ncol(ref_dry)]
# Calculate the average reflectance of the columns and exclude NA values
avg_values <- colMeans(ref_dry, na.rm=T)
# Create a new data with "Sample_ID" and "Reflectance" columns containing the soil sample ID and average reflectance respectively
ref_dry_avg <- data.frame(
"Sample_ID" = colnames(ref_dry),
"Reflectance" = avg_values
)
# Read the "SoilMetrics_v01" file as a data frame
data_met <- read.csv("data-raw/SoilMetrics_v01.csv")
# Get a summary of the data frame:
summary(data_met)
# Install and load the package needed to preprocess the data
install.packages("dplyr")
library(dplyr)
# Merge the organic carbon data from "data_met" to "ref_dry_avg" dataset based on sample ID
ref_dry_avg <- ref_dry_avg %>%
left_join(data_met %>% select(Sample_ID, OC), by = "Sample_ID") %>%
rename(Organic_Carbon = OC)
# Get a summary of the new data frame
summary(ref_dry_avg)
# Save to data folder
usethis::use_data(ref_dry_avg, overwrite = TRUE)
# Install and load the package needed to preprocess the data
install.packages("prospectr")
library(prospectr)
# Read the "SoilReflectanceDry_v01" file as a data frame
data <- read.csv("data-raw/SoilReflectanceDry_v01.csv")
# Get a summary of the data frame
summary(data)
# Calculate continuum removal for the data frame
ref_dry <- as.data.frame(apply(data[,-1], MARGIN=2, FUN =continuumRemoval, wav = data$Wavelength))
ref_dry <- cbind(Wavelength = data$Wavelength, ref_dry)
# Select the rows to be the target wavelegths and the columns to be the target samples
ref_dry <- ref_dry[350:2500, 2:ncol(ref_dry)]
# Calculate the average reflectance of the columns and exclude NA values
avg_values <- colMeans(ref_dry, na.rm=T)
# Create a new data with "Sample_ID" and "Reflectance" columns containing the soil sample ID and average reflectance respectively
ref_dry_avg <- data.frame(
"Sample_ID" = colnames(ref_dry),
"Reflectance" = avg_values
)
# Read the "SoilMetrics_v01" file as a data frame
data_met <- read.csv("data-raw/SoilMetrics_v01.csv")
# Get a summary of the data frame:
summary(data_met)
# Install and load the package needed to preprocess the data
install.packages("dplyr")
library(dplyr)
# Merge the organic carbon data from "data_met" to "ref_dry_avg" dataset based on sample ID
ref_dry_avg <- ref_dry_avg %>%
left_join(data_met %>% select(Sample_ID, OC), by = "Sample_ID") %>%
rename(Organic_Carbon = OC)
# Get a summary of the new data frame
summary(ref_dry_avg)
# Save to data folder
usethis::use_data(ref_dry_avg, overwrite = TRUE)
install.packages("dplyr")
# Install and load the package needed to preprocess the data
install.packages("prospectr")
library(prospectr)
# Read the "SoilReflectanceDry_v01" file as a data frame
data <- read.csv("data-raw/SoilReflectanceDry_v01.csv")
# Get a summary of the data frame
summary(data)
# Calculate continuum removal for the data frame
ref_dry <- as.data.frame(apply(data[,-1], MARGIN=2, FUN =continuumRemoval, wav = data$Wavelength))
ref_dry <- cbind(Wavelength = data$Wavelength, ref_dry)
# Select the rows to be the target wavelegths and the columns to be the target samples
ref_dry <- ref_dry[350:2500, 2:ncol(ref_dry)]
# Calculate the average reflectance of the columns and exclude NA values
avg_values <- colMeans(ref_dry, na.rm=T)
# Create a new data with "Sample_ID" and "Reflectance" columns containing the soil sample ID and average reflectance respectively
ref_dry_avg <- data.frame(
"Sample_ID" = colnames(ref_dry),
"Reflectance" = avg_values
)
# Read the "SoilMetrics_v01" file as a data frame
data_met <- read.csv("data-raw/SoilMetrics_v01.csv")
# Get a summary of the data frame:
summary(data_met)
# Install and load the package needed to preprocess the data
install.packages("dplyr")
library(dplyr)
# Merge the organic carbon data from "data_met" to "ref_dry_avg" dataset based on sample ID
ref_dry_avg <- ref_dry_avg %>%
left_join(data_met %>% select(Sample_ID, OC), by = "Sample_ID") %>%
rename(Organic_Carbon = OC)
# Get a summary of the new data frame
summary(ref_dry_avg)
# Save to data folder
usethis::use_data(ref_dry_avg, overwrite = TRUE)
library(cpred)
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
devtools::install_github("KangyuSo/my-GEO712-repository")
install.packages("cpred")
library(cpred)
pred_c <- cpred(ref_dry_avg, "Reflectance", "Organic_Carbon", 0.7, 10, "Predicted_Organic_Carbon")
data(ref_dry_avg)
